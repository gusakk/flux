// DO NOT EDIT: This file is autogenerated via the builtin command.

package ecs

import (
	flux "github.com/gusakk/flux"
	ast "github.com/gusakk/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   51,
				},
				File:   "ecs.flux",
				Source: "package ecs\n\nbuiltin ecs_package_version\nbuiltin timededup\n\n// convert name of measurement to _downsampled\nget_downsampled_measurement = (measurement, ds_suffix=\"_downsampled\", period, limit) => {\n    return measurement + [\"\",ds_suffix][int(v:period >= limit)]\n}\n\n// shortcut to calculate dynamic window based on maximum desired windows per view\nget_dynamic_window_info = (int_start, int_stop, max, start_offset=0, stop_offset=2, min_window=300) => {\n    time_int = int_stop - int_start\n    sec_in_ns = 1000000000\n    window_len = time_int / max / min_window * min_window\n    is_min_window = window_len < min_window\n    window_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\n    wl_dur = duration(v:window_len * sec_in_ns)\n    start_dt = time(v:((int_start/window_len) - start_offset) * window_len * sec_in_ns)\n    end_dt = time(v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns)\n   return {duration: wl_dur, interval: time_int, start: start_dt, stop: end_dt}\n}\n\n// max - maximum number of points per graph\n// downsample_limit - time to switch to downsample (default=5 days)\n// min_downsample_window - minimal window in downsample mode (default=1 day)\nget_dyn_downsample_info = (start, stop, max,\n                           start_offset=2, stop_offset=1,\n                           measurement,\n                           ds_suffix=\"_downsampled\",\n                           downsample_limit=432000,\n                           min_downsample_window=86400\n    ) => {\n    int_start = int(v:start)\n    int_stop = int(v:stop)\n    time_int = int_stop - int_start\n    in_ds = int(v:time_int >= downsample_limit)\n    new_measurement = measurement + [\"\",ds_suffix][in_ds]\n    new_window = [300, min_downsample_window][in_ds]\n    dinf = get_dynamic_window_info(int_start:int_start,\n                                   int_stop:int_stop,\n                                   max:max, start_offset:start_offset,\n                                   stop_offset:stop_offset,\n                                   min_window:new_window)\n    return {\n            in_downsample: in_ds,\n            duration: dinf.duration,\n            start: dinf.start, stop: dinf.stop,\n            measurement: new_measurement\n    }\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 28,
						Line:   3,
					},
					File:   "ecs.flux",
					Source: "builtin ecs_package_version",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   3,
						},
						File:   "ecs.flux",
						Source: "ecs_package_version",
						Start: ast.Position{
							Column: 9,
							Line:   3,
						},
					},
				},
				Name: "ecs_package_version",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   4,
					},
					File:   "ecs.flux",
					Source: "builtin timededup",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   4,
						},
						File:   "ecs.flux",
						Source: "timededup",
						Start: ast.Position{
							Column: 9,
							Line:   4,
						},
					},
				},
				Name: "timededup",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   9,
					},
					File:   "ecs.flux",
					Source: "get_downsampled_measurement = (measurement, ds_suffix=\"_downsampled\", period, limit) => {\n    return measurement + [\"\",ds_suffix][int(v:period >= limit)]\n}",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   7,
						},
						File:   "ecs.flux",
						Source: "get_downsampled_measurement",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "get_downsampled_measurement",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   9,
						},
						File:   "ecs.flux",
						Source: "(measurement, ds_suffix=\"_downsampled\", period, limit) => {\n    return measurement + [\"\",ds_suffix][int(v:period >= limit)]\n}",
						Start: ast.Position{
							Column: 31,
							Line:   7,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   9,
							},
							File:   "ecs.flux",
							Source: "{\n    return measurement + [\"\",ds_suffix][int(v:period >= limit)]\n}",
							Start: ast.Position{
								Column: 89,
								Line:   7,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   8,
									},
									File:   "ecs.flux",
									Source: "measurement + [\"\",ds_suffix][int(v:period >= limit)]",
									Start: ast.Position{
										Column: 12,
										Line:   8,
									},
								},
							},
							Left: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   8,
										},
										File:   "ecs.flux",
										Source: "measurement",
										Start: ast.Position{
											Column: 12,
											Line:   8,
										},
									},
								},
								Name: "measurement",
							},
							Operator: 5,
							Right: &ast.IndexExpression{
								Array: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   8,
											},
											File:   "ecs.flux",
											Source: "[\"\",ds_suffix]",
											Start: ast.Position{
												Column: 26,
												Line:   8,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   8,
												},
												File:   "ecs.flux",
												Source: "\"\"",
												Start: ast.Position{
													Column: 27,
													Line:   8,
												},
											},
										},
										Value: "",
									}, &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   8,
												},
												File:   "ecs.flux",
												Source: "ds_suffix",
												Start: ast.Position{
													Column: 30,
													Line:   8,
												},
											},
										},
										Name: "ds_suffix",
									}},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   8,
										},
										File:   "ecs.flux",
										Source: "[\"\",ds_suffix][int(v:period >= limit)]",
										Start: ast.Position{
											Column: 26,
											Line:   8,
										},
									},
								},
								Index: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   8,
												},
												File:   "ecs.flux",
												Source: "v:period >= limit",
												Start: ast.Position{
													Column: 45,
													Line:   8,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   8,
													},
													File:   "ecs.flux",
													Source: "v:period >= limit",
													Start: ast.Position{
														Column: 45,
														Line:   8,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   8,
														},
														File:   "ecs.flux",
														Source: "v",
														Start: ast.Position{
															Column: 45,
															Line:   8,
														},
													},
												},
												Name: "v",
											},
											Value: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   8,
														},
														File:   "ecs.flux",
														Source: "period >= limit",
														Start: ast.Position{
															Column: 47,
															Line:   8,
														},
													},
												},
												Left: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   8,
															},
															File:   "ecs.flux",
															Source: "period",
															Start: ast.Position{
																Column: 47,
																Line:   8,
															},
														},
													},
													Name: "period",
												},
												Operator: 9,
												Right: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 62,
																Line:   8,
															},
															File:   "ecs.flux",
															Source: "limit",
															Start: ast.Position{
																Column: 57,
																Line:   8,
															},
														},
													},
													Name: "limit",
												},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   8,
											},
											File:   "ecs.flux",
											Source: "int(v:period >= limit)",
											Start: ast.Position{
												Column: 41,
												Line:   8,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   8,
												},
												File:   "ecs.flux",
												Source: "int",
												Start: ast.Position{
													Column: 41,
													Line:   8,
												},
											},
										},
										Name: "int",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   8,
								},
								File:   "ecs.flux",
								Source: "return measurement + [\"\",ds_suffix][int(v:period >= limit)]",
								Start: ast.Position{
									Column: 5,
									Line:   8,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   7,
							},
							File:   "ecs.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 32,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   7,
								},
								File:   "ecs.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 32,
									Line:   7,
								},
							},
						},
						Name: "measurement",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 69,
								Line:   7,
							},
							File:   "ecs.flux",
							Source: "ds_suffix=\"_downsampled\"",
							Start: ast.Position{
								Column: 45,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   7,
								},
								File:   "ecs.flux",
								Source: "ds_suffix",
								Start: ast.Position{
									Column: 45,
									Line:   7,
								},
							},
						},
						Name: "ds_suffix",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   7,
								},
								File:   "ecs.flux",
								Source: "\"_downsampled\"",
								Start: ast.Position{
									Column: 55,
									Line:   7,
								},
							},
						},
						Value: "_downsampled",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 77,
								Line:   7,
							},
							File:   "ecs.flux",
							Source: "period",
							Start: ast.Position{
								Column: 71,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   7,
								},
								File:   "ecs.flux",
								Source: "period",
								Start: ast.Position{
									Column: 71,
									Line:   7,
								},
							},
						},
						Name: "period",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 84,
								Line:   7,
							},
							File:   "ecs.flux",
							Source: "limit",
							Start: ast.Position{
								Column: 79,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   7,
								},
								File:   "ecs.flux",
								Source: "limit",
								Start: ast.Position{
									Column: 79,
									Line:   7,
								},
							},
						},
						Name: "limit",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   22,
					},
					File:   "ecs.flux",
					Source: "get_dynamic_window_info = (int_start, int_stop, max, start_offset=0, stop_offset=2, min_window=300) => {\n    time_int = int_stop - int_start\n    sec_in_ns = 1000000000\n    window_len = time_int / max / min_window * min_window\n    is_min_window = window_len < min_window\n    window_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\n    wl_dur = duration(v:window_len * sec_in_ns)\n    start_dt = time(v:((int_start/window_len) - start_offset) * window_len * sec_in_ns)\n    end_dt = time(v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns)\n   return {duration: wl_dur, interval: time_int, start: start_dt, stop: end_dt}\n}",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 24,
							Line:   12,
						},
						File:   "ecs.flux",
						Source: "get_dynamic_window_info",
						Start: ast.Position{
							Column: 1,
							Line:   12,
						},
					},
				},
				Name: "get_dynamic_window_info",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   22,
						},
						File:   "ecs.flux",
						Source: "(int_start, int_stop, max, start_offset=0, stop_offset=2, min_window=300) => {\n    time_int = int_stop - int_start\n    sec_in_ns = 1000000000\n    window_len = time_int / max / min_window * min_window\n    is_min_window = window_len < min_window\n    window_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\n    wl_dur = duration(v:window_len * sec_in_ns)\n    start_dt = time(v:((int_start/window_len) - start_offset) * window_len * sec_in_ns)\n    end_dt = time(v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns)\n   return {duration: wl_dur, interval: time_int, start: start_dt, stop: end_dt}\n}",
						Start: ast.Position{
							Column: 27,
							Line:   12,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   22,
							},
							File:   "ecs.flux",
							Source: "{\n    time_int = int_stop - int_start\n    sec_in_ns = 1000000000\n    window_len = time_int / max / min_window * min_window\n    is_min_window = window_len < min_window\n    window_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)\n    wl_dur = duration(v:window_len * sec_in_ns)\n    start_dt = time(v:((int_start/window_len) - start_offset) * window_len * sec_in_ns)\n    end_dt = time(v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns)\n   return {duration: wl_dur, interval: time_int, start: start_dt, stop: end_dt}\n}",
							Start: ast.Position{
								Column: 104,
								Line:   12,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   13,
								},
								File:   "ecs.flux",
								Source: "time_int = int_stop - int_start",
								Start: ast.Position{
									Column: 5,
									Line:   13,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   13,
									},
									File:   "ecs.flux",
									Source: "time_int",
									Start: ast.Position{
										Column: 5,
										Line:   13,
									},
								},
							},
							Name: "time_int",
						},
						Init: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   13,
									},
									File:   "ecs.flux",
									Source: "int_stop - int_start",
									Start: ast.Position{
										Column: 16,
										Line:   13,
									},
								},
							},
							Left: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   13,
										},
										File:   "ecs.flux",
										Source: "int_stop",
										Start: ast.Position{
											Column: 16,
											Line:   13,
										},
									},
								},
								Name: "int_stop",
							},
							Operator: 6,
							Right: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   13,
										},
										File:   "ecs.flux",
										Source: "int_start",
										Start: ast.Position{
											Column: 27,
											Line:   13,
										},
									},
								},
								Name: "int_start",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   14,
								},
								File:   "ecs.flux",
								Source: "sec_in_ns = 1000000000",
								Start: ast.Position{
									Column: 5,
									Line:   14,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   14,
									},
									File:   "ecs.flux",
									Source: "sec_in_ns",
									Start: ast.Position{
										Column: 5,
										Line:   14,
									},
								},
							},
							Name: "sec_in_ns",
						},
						Init: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   14,
									},
									File:   "ecs.flux",
									Source: "1000000000",
									Start: ast.Position{
										Column: 17,
										Line:   14,
									},
								},
							},
							Value: int64(1000000000),
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   15,
								},
								File:   "ecs.flux",
								Source: "window_len = time_int / max / min_window * min_window",
								Start: ast.Position{
									Column: 5,
									Line:   15,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   15,
									},
									File:   "ecs.flux",
									Source: "window_len",
									Start: ast.Position{
										Column: 5,
										Line:   15,
									},
								},
							},
							Name: "window_len",
						},
						Init: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   15,
									},
									File:   "ecs.flux",
									Source: "time_int / max / min_window * min_window",
									Start: ast.Position{
										Column: 18,
										Line:   15,
									},
								},
							},
							Left: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   15,
										},
										File:   "ecs.flux",
										Source: "time_int / max / min_window",
										Start: ast.Position{
											Column: 18,
											Line:   15,
										},
									},
								},
								Left: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   15,
											},
											File:   "ecs.flux",
											Source: "time_int / max",
											Start: ast.Position{
												Column: 18,
												Line:   15,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   15,
												},
												File:   "ecs.flux",
												Source: "time_int",
												Start: ast.Position{
													Column: 18,
													Line:   15,
												},
											},
										},
										Name: "time_int",
									},
									Operator: 2,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   15,
												},
												File:   "ecs.flux",
												Source: "max",
												Start: ast.Position{
													Column: 29,
													Line:   15,
												},
											},
										},
										Name: "max",
									},
								},
								Operator: 2,
								Right: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   15,
											},
											File:   "ecs.flux",
											Source: "min_window",
											Start: ast.Position{
												Column: 35,
												Line:   15,
											},
										},
									},
									Name: "min_window",
								},
							},
							Operator: 1,
							Right: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   15,
										},
										File:   "ecs.flux",
										Source: "min_window",
										Start: ast.Position{
											Column: 48,
											Line:   15,
										},
									},
								},
								Name: "min_window",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   16,
								},
								File:   "ecs.flux",
								Source: "is_min_window = window_len < min_window",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   16,
									},
									File:   "ecs.flux",
									Source: "is_min_window",
									Start: ast.Position{
										Column: 5,
										Line:   16,
									},
								},
							},
							Name: "is_min_window",
						},
						Init: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   16,
									},
									File:   "ecs.flux",
									Source: "window_len < min_window",
									Start: ast.Position{
										Column: 21,
										Line:   16,
									},
								},
							},
							Left: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   16,
										},
										File:   "ecs.flux",
										Source: "window_len",
										Start: ast.Position{
											Column: 21,
											Line:   16,
										},
									},
								},
								Name: "window_len",
							},
							Operator: 8,
							Right: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   16,
										},
										File:   "ecs.flux",
										Source: "min_window",
										Start: ast.Position{
											Column: 34,
											Line:   16,
										},
									},
								},
								Name: "min_window",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   17,
								},
								File:   "ecs.flux",
								Source: "window_len = (int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   17,
									},
									File:   "ecs.flux",
									Source: "window_len",
									Start: ast.Position{
										Column: 5,
										Line:   17,
									},
								},
							},
							Name: "window_len",
						},
						Init: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   17,
									},
									File:   "ecs.flux",
									Source: "(int(v:(is_min_window)) * min_window) + (int(v:(not is_min_window)) * window_len)",
									Start: ast.Position{
										Column: 18,
										Line:   17,
									},
								},
							},
							Left: &ast.ParenExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   17,
										},
										File:   "ecs.flux",
										Source: "(int(v:(is_min_window)) * min_window)",
										Start: ast.Position{
											Column: 18,
											Line:   17,
										},
									},
								},
								Expression: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   17,
											},
											File:   "ecs.flux",
											Source: "int(v:(is_min_window)) * min_window",
											Start: ast.Position{
												Column: 19,
												Line:   17,
											},
										},
									},
									Left: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   17,
													},
													File:   "ecs.flux",
													Source: "v:(is_min_window",
													Start: ast.Position{
														Column: 23,
														Line:   17,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   17,
														},
														File:   "ecs.flux",
														Source: "v:(is_min_window",
														Start: ast.Position{
															Column: 23,
															Line:   17,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   17,
															},
															File:   "ecs.flux",
															Source: "v",
															Start: ast.Position{
																Column: 23,
																Line:   17,
															},
														},
													},
													Name: "v",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   17,
															},
															File:   "ecs.flux",
															Source: "is_min_window",
															Start: ast.Position{
																Column: 26,
																Line:   17,
															},
														},
													},
													Name: "is_min_window",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   17,
												},
												File:   "ecs.flux",
												Source: "int(v:(is_min_window))",
												Start: ast.Position{
													Column: 19,
													Line:   17,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   17,
													},
													File:   "ecs.flux",
													Source: "int",
													Start: ast.Position{
														Column: 19,
														Line:   17,
													},
												},
											},
											Name: "int",
										},
									},
									Operator: 1,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   17,
												},
												File:   "ecs.flux",
												Source: "min_window",
												Start: ast.Position{
													Column: 44,
													Line:   17,
												},
											},
										},
										Name: "min_window",
									},
								},
							},
							Operator: 5,
							Right: &ast.ParenExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 99,
											Line:   17,
										},
										File:   "ecs.flux",
										Source: "(int(v:(not is_min_window)) * window_len)",
										Start: ast.Position{
											Column: 58,
											Line:   17,
										},
									},
								},
								Expression: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 98,
												Line:   17,
											},
											File:   "ecs.flux",
											Source: "int(v:(not is_min_window)) * window_len",
											Start: ast.Position{
												Column: 59,
												Line:   17,
											},
										},
									},
									Left: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 84,
														Line:   17,
													},
													File:   "ecs.flux",
													Source: "v:(not is_min_window)",
													Start: ast.Position{
														Column: 63,
														Line:   17,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 84,
															Line:   17,
														},
														File:   "ecs.flux",
														Source: "v:(not is_min_window)",
														Start: ast.Position{
															Column: 63,
															Line:   17,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   17,
															},
															File:   "ecs.flux",
															Source: "v",
															Start: ast.Position{
																Column: 63,
																Line:   17,
															},
														},
													},
													Name: "v",
												},
												Value: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 84,
																Line:   17,
															},
															File:   "ecs.flux",
															Source: "(not is_min_window)",
															Start: ast.Position{
																Column: 65,
																Line:   17,
															},
														},
													},
													Expression: &ast.UnaryExpression{
														Argument: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 83,
																		Line:   17,
																	},
																	File:   "ecs.flux",
																	Source: "is_min_window",
																	Start: ast.Position{
																		Column: 70,
																		Line:   17,
																	},
																},
															},
															Name: "is_min_window",
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 83,
																	Line:   17,
																},
																File:   "ecs.flux",
																Source: "not is_min_window",
																Start: ast.Position{
																	Column: 66,
																	Line:   17,
																},
															},
														},
														Operator: 13,
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 85,
													Line:   17,
												},
												File:   "ecs.flux",
												Source: "int(v:(not is_min_window))",
												Start: ast.Position{
													Column: 59,
													Line:   17,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 62,
														Line:   17,
													},
													File:   "ecs.flux",
													Source: "int",
													Start: ast.Position{
														Column: 59,
														Line:   17,
													},
												},
											},
											Name: "int",
										},
									},
									Operator: 1,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 98,
													Line:   17,
												},
												File:   "ecs.flux",
												Source: "window_len",
												Start: ast.Position{
													Column: 88,
													Line:   17,
												},
											},
										},
										Name: "window_len",
									},
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   18,
								},
								File:   "ecs.flux",
								Source: "wl_dur = duration(v:window_len * sec_in_ns)",
								Start: ast.Position{
									Column: 5,
									Line:   18,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   18,
									},
									File:   "ecs.flux",
									Source: "wl_dur",
									Start: ast.Position{
										Column: 5,
										Line:   18,
									},
								},
							},
							Name: "wl_dur",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   18,
										},
										File:   "ecs.flux",
										Source: "v:window_len * sec_in_ns",
										Start: ast.Position{
											Column: 23,
											Line:   18,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   18,
											},
											File:   "ecs.flux",
											Source: "v:window_len * sec_in_ns",
											Start: ast.Position{
												Column: 23,
												Line:   18,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   18,
												},
												File:   "ecs.flux",
												Source: "v",
												Start: ast.Position{
													Column: 23,
													Line:   18,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   18,
												},
												File:   "ecs.flux",
												Source: "window_len * sec_in_ns",
												Start: ast.Position{
													Column: 25,
													Line:   18,
												},
											},
										},
										Left: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   18,
													},
													File:   "ecs.flux",
													Source: "window_len",
													Start: ast.Position{
														Column: 25,
														Line:   18,
													},
												},
											},
											Name: "window_len",
										},
										Operator: 1,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   18,
													},
													File:   "ecs.flux",
													Source: "sec_in_ns",
													Start: ast.Position{
														Column: 38,
														Line:   18,
													},
												},
											},
											Name: "sec_in_ns",
										},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   18,
									},
									File:   "ecs.flux",
									Source: "duration(v:window_len * sec_in_ns)",
									Start: ast.Position{
										Column: 14,
										Line:   18,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   18,
										},
										File:   "ecs.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 14,
											Line:   18,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   19,
								},
								File:   "ecs.flux",
								Source: "start_dt = time(v:((int_start/window_len) - start_offset) * window_len * sec_in_ns)",
								Start: ast.Position{
									Column: 5,
									Line:   19,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   19,
									},
									File:   "ecs.flux",
									Source: "start_dt",
									Start: ast.Position{
										Column: 5,
										Line:   19,
									},
								},
							},
							Name: "start_dt",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 87,
											Line:   19,
										},
										File:   "ecs.flux",
										Source: "v:((int_start/window_len) - start_offset) * window_len * sec_in_ns",
										Start: ast.Position{
											Column: 21,
											Line:   19,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 87,
												Line:   19,
											},
											File:   "ecs.flux",
											Source: "v:((int_start/window_len) - start_offset) * window_len * sec_in_ns",
											Start: ast.Position{
												Column: 21,
												Line:   19,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   19,
												},
												File:   "ecs.flux",
												Source: "v",
												Start: ast.Position{
													Column: 21,
													Line:   19,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 87,
													Line:   19,
												},
												File:   "ecs.flux",
												Source: "((int_start/window_len) - start_offset) * window_len * sec_in_ns",
												Start: ast.Position{
													Column: 23,
													Line:   19,
												},
											},
										},
										Left: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   19,
													},
													File:   "ecs.flux",
													Source: "((int_start/window_len) - start_offset) * window_len",
													Start: ast.Position{
														Column: 23,
														Line:   19,
													},
												},
											},
											Left: &ast.ParenExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   19,
														},
														File:   "ecs.flux",
														Source: "((int_start/window_len) - start_offset)",
														Start: ast.Position{
															Column: 23,
															Line:   19,
														},
													},
												},
												Expression: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 61,
																Line:   19,
															},
															File:   "ecs.flux",
															Source: "(int_start/window_len) - start_offset",
															Start: ast.Position{
																Column: 24,
																Line:   19,
															},
														},
													},
													Left: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   19,
																},
																File:   "ecs.flux",
																Source: "(int_start/window_len)",
																Start: ast.Position{
																	Column: 24,
																	Line:   19,
																},
															},
														},
														Expression: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 45,
																		Line:   19,
																	},
																	File:   "ecs.flux",
																	Source: "int_start/window_len",
																	Start: ast.Position{
																		Column: 25,
																		Line:   19,
																	},
																},
															},
															Left: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   19,
																		},
																		File:   "ecs.flux",
																		Source: "int_start",
																		Start: ast.Position{
																			Column: 25,
																			Line:   19,
																		},
																	},
																},
																Name: "int_start",
															},
															Operator: 2,
															Right: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 45,
																			Line:   19,
																		},
																		File:   "ecs.flux",
																		Source: "window_len",
																		Start: ast.Position{
																			Column: 35,
																			Line:   19,
																		},
																	},
																},
																Name: "window_len",
															},
														},
													},
													Operator: 6,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 61,
																	Line:   19,
																},
																File:   "ecs.flux",
																Source: "start_offset",
																Start: ast.Position{
																	Column: 49,
																	Line:   19,
																},
															},
														},
														Name: "start_offset",
													},
												},
											},
											Operator: 1,
											Right: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 75,
															Line:   19,
														},
														File:   "ecs.flux",
														Source: "window_len",
														Start: ast.Position{
															Column: 65,
															Line:   19,
														},
													},
												},
												Name: "window_len",
											},
										},
										Operator: 1,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   19,
													},
													File:   "ecs.flux",
													Source: "sec_in_ns",
													Start: ast.Position{
														Column: 78,
														Line:   19,
													},
												},
											},
											Name: "sec_in_ns",
										},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   19,
									},
									File:   "ecs.flux",
									Source: "time(v:((int_start/window_len) - start_offset) * window_len * sec_in_ns)",
									Start: ast.Position{
										Column: 16,
										Line:   19,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   19,
										},
										File:   "ecs.flux",
										Source: "time",
										Start: ast.Position{
											Column: 16,
											Line:   19,
										},
									},
								},
								Name: "time",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   20,
								},
								File:   "ecs.flux",
								Source: "end_dt = time(v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns)",
								Start: ast.Position{
									Column: 5,
									Line:   20,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   20,
									},
									File:   "ecs.flux",
									Source: "end_dt",
									Start: ast.Position{
										Column: 5,
										Line:   20,
									},
								},
							},
							Name: "end_dt",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 83,
											Line:   20,
										},
										File:   "ecs.flux",
										Source: "v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns",
										Start: ast.Position{
											Column: 19,
											Line:   20,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 83,
												Line:   20,
											},
											File:   "ecs.flux",
											Source: "v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns",
											Start: ast.Position{
												Column: 19,
												Line:   20,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   20,
												},
												File:   "ecs.flux",
												Source: "v",
												Start: ast.Position{
													Column: 19,
													Line:   20,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   20,
												},
												File:   "ecs.flux",
												Source: "((int_stop/window_len) + stop_offset) * window_len * sec_in_ns",
												Start: ast.Position{
													Column: 21,
													Line:   20,
												},
											},
										},
										Left: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 71,
														Line:   20,
													},
													File:   "ecs.flux",
													Source: "((int_stop/window_len) + stop_offset) * window_len",
													Start: ast.Position{
														Column: 21,
														Line:   20,
													},
												},
											},
											Left: &ast.ParenExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   20,
														},
														File:   "ecs.flux",
														Source: "((int_stop/window_len) + stop_offset)",
														Start: ast.Position{
															Column: 21,
															Line:   20,
														},
													},
												},
												Expression: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 57,
																Line:   20,
															},
															File:   "ecs.flux",
															Source: "(int_stop/window_len) + stop_offset",
															Start: ast.Position{
																Column: 22,
																Line:   20,
															},
														},
													},
													Left: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   20,
																},
																File:   "ecs.flux",
																Source: "(int_stop/window_len)",
																Start: ast.Position{
																	Column: 22,
																	Line:   20,
																},
															},
														},
														Expression: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   20,
																	},
																	File:   "ecs.flux",
																	Source: "int_stop/window_len",
																	Start: ast.Position{
																		Column: 23,
																		Line:   20,
																	},
																},
															},
															Left: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   20,
																		},
																		File:   "ecs.flux",
																		Source: "int_stop",
																		Start: ast.Position{
																			Column: 23,
																			Line:   20,
																		},
																	},
																},
																Name: "int_stop",
															},
															Operator: 2,
															Right: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   20,
																		},
																		File:   "ecs.flux",
																		Source: "window_len",
																		Start: ast.Position{
																			Column: 32,
																			Line:   20,
																		},
																	},
																},
																Name: "window_len",
															},
														},
													},
													Operator: 5,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   20,
																},
																File:   "ecs.flux",
																Source: "stop_offset",
																Start: ast.Position{
																	Column: 46,
																	Line:   20,
																},
															},
														},
														Name: "stop_offset",
													},
												},
											},
											Operator: 1,
											Right: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   20,
														},
														File:   "ecs.flux",
														Source: "window_len",
														Start: ast.Position{
															Column: 61,
															Line:   20,
														},
													},
												},
												Name: "window_len",
											},
										},
										Operator: 1,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   20,
													},
													File:   "ecs.flux",
													Source: "sec_in_ns",
													Start: ast.Position{
														Column: 74,
														Line:   20,
													},
												},
											},
											Name: "sec_in_ns",
										},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   20,
									},
									File:   "ecs.flux",
									Source: "time(v:((int_stop/window_len) + stop_offset) * window_len * sec_in_ns)",
									Start: ast.Position{
										Column: 14,
										Line:   20,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   20,
										},
										File:   "ecs.flux",
										Source: "time",
										Start: ast.Position{
											Column: 14,
											Line:   20,
										},
									},
								},
								Name: "time",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   21,
									},
									File:   "ecs.flux",
									Source: "{duration: wl_dur, interval: time_int, start: start_dt, stop: end_dt}",
									Start: ast.Position{
										Column: 11,
										Line:   21,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   21,
										},
										File:   "ecs.flux",
										Source: "duration: wl_dur",
										Start: ast.Position{
											Column: 12,
											Line:   21,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "duration",
											Start: ast.Position{
												Column: 12,
												Line:   21,
											},
										},
									},
									Name: "duration",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "wl_dur",
											Start: ast.Position{
												Column: 22,
												Line:   21,
											},
										},
									},
									Name: "wl_dur",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   21,
										},
										File:   "ecs.flux",
										Source: "interval: time_int",
										Start: ast.Position{
											Column: 30,
											Line:   21,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "interval",
											Start: ast.Position{
												Column: 30,
												Line:   21,
											},
										},
									},
									Name: "interval",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "time_int",
											Start: ast.Position{
												Column: 40,
												Line:   21,
											},
										},
									},
									Name: "time_int",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   21,
										},
										File:   "ecs.flux",
										Source: "start: start_dt",
										Start: ast.Position{
											Column: 50,
											Line:   21,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "start",
											Start: ast.Position{
												Column: 50,
												Line:   21,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "start_dt",
											Start: ast.Position{
												Column: 57,
												Line:   21,
											},
										},
									},
									Name: "start_dt",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 79,
											Line:   21,
										},
										File:   "ecs.flux",
										Source: "stop: end_dt",
										Start: ast.Position{
											Column: 67,
											Line:   21,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "stop",
											Start: ast.Position{
												Column: 67,
												Line:   21,
											},
										},
									},
									Name: "stop",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 79,
												Line:   21,
											},
											File:   "ecs.flux",
											Source: "end_dt",
											Start: ast.Position{
												Column: 73,
												Line:   21,
											},
										},
									},
									Name: "end_dt",
								},
							}},
							With: nil,
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   21,
								},
								File:   "ecs.flux",
								Source: "return {duration: wl_dur, interval: time_int, start: start_dt, stop: end_dt}",
								Start: ast.Position{
									Column: 4,
									Line:   21,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   12,
							},
							File:   "ecs.flux",
							Source: "int_start",
							Start: ast.Position{
								Column: 28,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "int_start",
								Start: ast.Position{
									Column: 28,
									Line:   12,
								},
							},
						},
						Name: "int_start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   12,
							},
							File:   "ecs.flux",
							Source: "int_stop",
							Start: ast.Position{
								Column: 39,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "int_stop",
								Start: ast.Position{
									Column: 39,
									Line:   12,
								},
							},
						},
						Name: "int_stop",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   12,
							},
							File:   "ecs.flux",
							Source: "max",
							Start: ast.Position{
								Column: 49,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "max",
								Start: ast.Position{
									Column: 49,
									Line:   12,
								},
							},
						},
						Name: "max",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   12,
							},
							File:   "ecs.flux",
							Source: "start_offset=0",
							Start: ast.Position{
								Column: 54,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "start_offset",
								Start: ast.Position{
									Column: 54,
									Line:   12,
								},
							},
						},
						Name: "start_offset",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "0",
								Start: ast.Position{
									Column: 67,
									Line:   12,
								},
							},
						},
						Value: int64(0),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 83,
								Line:   12,
							},
							File:   "ecs.flux",
							Source: "stop_offset=2",
							Start: ast.Position{
								Column: 70,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "stop_offset",
								Start: ast.Position{
									Column: 70,
									Line:   12,
								},
							},
						},
						Name: "stop_offset",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 83,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "2",
								Start: ast.Position{
									Column: 82,
									Line:   12,
								},
							},
						},
						Value: int64(2),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 99,
								Line:   12,
							},
							File:   "ecs.flux",
							Source: "min_window=300",
							Start: ast.Position{
								Column: 85,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 95,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "min_window",
								Start: ast.Position{
									Column: 85,
									Line:   12,
								},
							},
						},
						Name: "min_window",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   12,
								},
								File:   "ecs.flux",
								Source: "300",
								Start: ast.Position{
									Column: 96,
									Line:   12,
								},
							},
						},
						Value: int64(300),
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   51,
					},
					File:   "ecs.flux",
					Source: "get_dyn_downsample_info = (start, stop, max,\n                           start_offset=2, stop_offset=1,\n                           measurement,\n                           ds_suffix=\"_downsampled\",\n                           downsample_limit=432000,\n                           min_downsample_window=86400\n    ) => {\n    int_start = int(v:start)\n    int_stop = int(v:stop)\n    time_int = int_stop - int_start\n    in_ds = int(v:time_int >= downsample_limit)\n    new_measurement = measurement + [\"\",ds_suffix][in_ds]\n    new_window = [300, min_downsample_window][in_ds]\n    dinf = get_dynamic_window_info(int_start:int_start,\n                                   int_stop:int_stop,\n                                   max:max, start_offset:start_offset,\n                                   stop_offset:stop_offset,\n                                   min_window:new_window)\n    return {\n            in_downsample: in_ds,\n            duration: dinf.duration,\n            start: dinf.start, stop: dinf.stop,\n            measurement: new_measurement\n    }\n}",
					Start: ast.Position{
						Column: 1,
						Line:   27,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 24,
							Line:   27,
						},
						File:   "ecs.flux",
						Source: "get_dyn_downsample_info",
						Start: ast.Position{
							Column: 1,
							Line:   27,
						},
					},
				},
				Name: "get_dyn_downsample_info",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   51,
						},
						File:   "ecs.flux",
						Source: "(start, stop, max,\n                           start_offset=2, stop_offset=1,\n                           measurement,\n                           ds_suffix=\"_downsampled\",\n                           downsample_limit=432000,\n                           min_downsample_window=86400\n    ) => {\n    int_start = int(v:start)\n    int_stop = int(v:stop)\n    time_int = int_stop - int_start\n    in_ds = int(v:time_int >= downsample_limit)\n    new_measurement = measurement + [\"\",ds_suffix][in_ds]\n    new_window = [300, min_downsample_window][in_ds]\n    dinf = get_dynamic_window_info(int_start:int_start,\n                                   int_stop:int_stop,\n                                   max:max, start_offset:start_offset,\n                                   stop_offset:stop_offset,\n                                   min_window:new_window)\n    return {\n            in_downsample: in_ds,\n            duration: dinf.duration,\n            start: dinf.start, stop: dinf.stop,\n            measurement: new_measurement\n    }\n}",
						Start: ast.Position{
							Column: 27,
							Line:   27,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   51,
							},
							File:   "ecs.flux",
							Source: "{\n    int_start = int(v:start)\n    int_stop = int(v:stop)\n    time_int = int_stop - int_start\n    in_ds = int(v:time_int >= downsample_limit)\n    new_measurement = measurement + [\"\",ds_suffix][in_ds]\n    new_window = [300, min_downsample_window][in_ds]\n    dinf = get_dynamic_window_info(int_start:int_start,\n                                   int_stop:int_stop,\n                                   max:max, start_offset:start_offset,\n                                   stop_offset:stop_offset,\n                                   min_window:new_window)\n    return {\n            in_downsample: in_ds,\n            duration: dinf.duration,\n            start: dinf.start, stop: dinf.stop,\n            measurement: new_measurement\n    }\n}",
							Start: ast.Position{
								Column: 10,
								Line:   33,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   34,
								},
								File:   "ecs.flux",
								Source: "int_start = int(v:start)",
								Start: ast.Position{
									Column: 5,
									Line:   34,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   34,
									},
									File:   "ecs.flux",
									Source: "int_start",
									Start: ast.Position{
										Column: 5,
										Line:   34,
									},
								},
							},
							Name: "int_start",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   34,
										},
										File:   "ecs.flux",
										Source: "v:start",
										Start: ast.Position{
											Column: 21,
											Line:   34,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   34,
											},
											File:   "ecs.flux",
											Source: "v:start",
											Start: ast.Position{
												Column: 21,
												Line:   34,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   34,
												},
												File:   "ecs.flux",
												Source: "v",
												Start: ast.Position{
													Column: 21,
													Line:   34,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   34,
												},
												File:   "ecs.flux",
												Source: "start",
												Start: ast.Position{
													Column: 23,
													Line:   34,
												},
											},
										},
										Name: "start",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   34,
									},
									File:   "ecs.flux",
									Source: "int(v:start)",
									Start: ast.Position{
										Column: 17,
										Line:   34,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   34,
										},
										File:   "ecs.flux",
										Source: "int",
										Start: ast.Position{
											Column: 17,
											Line:   34,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   35,
								},
								File:   "ecs.flux",
								Source: "int_stop = int(v:stop)",
								Start: ast.Position{
									Column: 5,
									Line:   35,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   35,
									},
									File:   "ecs.flux",
									Source: "int_stop",
									Start: ast.Position{
										Column: 5,
										Line:   35,
									},
								},
							},
							Name: "int_stop",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   35,
										},
										File:   "ecs.flux",
										Source: "v:stop",
										Start: ast.Position{
											Column: 20,
											Line:   35,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   35,
											},
											File:   "ecs.flux",
											Source: "v:stop",
											Start: ast.Position{
												Column: 20,
												Line:   35,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   35,
												},
												File:   "ecs.flux",
												Source: "v",
												Start: ast.Position{
													Column: 20,
													Line:   35,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   35,
												},
												File:   "ecs.flux",
												Source: "stop",
												Start: ast.Position{
													Column: 22,
													Line:   35,
												},
											},
										},
										Name: "stop",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   35,
									},
									File:   "ecs.flux",
									Source: "int(v:stop)",
									Start: ast.Position{
										Column: 16,
										Line:   35,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   35,
										},
										File:   "ecs.flux",
										Source: "int",
										Start: ast.Position{
											Column: 16,
											Line:   35,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   36,
								},
								File:   "ecs.flux",
								Source: "time_int = int_stop - int_start",
								Start: ast.Position{
									Column: 5,
									Line:   36,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   36,
									},
									File:   "ecs.flux",
									Source: "time_int",
									Start: ast.Position{
										Column: 5,
										Line:   36,
									},
								},
							},
							Name: "time_int",
						},
						Init: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   36,
									},
									File:   "ecs.flux",
									Source: "int_stop - int_start",
									Start: ast.Position{
										Column: 16,
										Line:   36,
									},
								},
							},
							Left: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   36,
										},
										File:   "ecs.flux",
										Source: "int_stop",
										Start: ast.Position{
											Column: 16,
											Line:   36,
										},
									},
								},
								Name: "int_stop",
							},
							Operator: 6,
							Right: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   36,
										},
										File:   "ecs.flux",
										Source: "int_start",
										Start: ast.Position{
											Column: 27,
											Line:   36,
										},
									},
								},
								Name: "int_start",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   37,
								},
								File:   "ecs.flux",
								Source: "in_ds = int(v:time_int >= downsample_limit)",
								Start: ast.Position{
									Column: 5,
									Line:   37,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   37,
									},
									File:   "ecs.flux",
									Source: "in_ds",
									Start: ast.Position{
										Column: 5,
										Line:   37,
									},
								},
							},
							Name: "in_ds",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   37,
										},
										File:   "ecs.flux",
										Source: "v:time_int >= downsample_limit",
										Start: ast.Position{
											Column: 17,
											Line:   37,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   37,
											},
											File:   "ecs.flux",
											Source: "v:time_int >= downsample_limit",
											Start: ast.Position{
												Column: 17,
												Line:   37,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   37,
												},
												File:   "ecs.flux",
												Source: "v",
												Start: ast.Position{
													Column: 17,
													Line:   37,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   37,
												},
												File:   "ecs.flux",
												Source: "time_int >= downsample_limit",
												Start: ast.Position{
													Column: 19,
													Line:   37,
												},
											},
										},
										Left: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   37,
													},
													File:   "ecs.flux",
													Source: "time_int",
													Start: ast.Position{
														Column: 19,
														Line:   37,
													},
												},
											},
											Name: "time_int",
										},
										Operator: 9,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   37,
													},
													File:   "ecs.flux",
													Source: "downsample_limit",
													Start: ast.Position{
														Column: 31,
														Line:   37,
													},
												},
											},
											Name: "downsample_limit",
										},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   37,
									},
									File:   "ecs.flux",
									Source: "int(v:time_int >= downsample_limit)",
									Start: ast.Position{
										Column: 13,
										Line:   37,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   37,
										},
										File:   "ecs.flux",
										Source: "int",
										Start: ast.Position{
											Column: 13,
											Line:   37,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   38,
								},
								File:   "ecs.flux",
								Source: "new_measurement = measurement + [\"\",ds_suffix][in_ds]",
								Start: ast.Position{
									Column: 5,
									Line:   38,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   38,
									},
									File:   "ecs.flux",
									Source: "new_measurement",
									Start: ast.Position{
										Column: 5,
										Line:   38,
									},
								},
							},
							Name: "new_measurement",
						},
						Init: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   38,
									},
									File:   "ecs.flux",
									Source: "measurement + [\"\",ds_suffix][in_ds]",
									Start: ast.Position{
										Column: 23,
										Line:   38,
									},
								},
							},
							Left: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   38,
										},
										File:   "ecs.flux",
										Source: "measurement",
										Start: ast.Position{
											Column: 23,
											Line:   38,
										},
									},
								},
								Name: "measurement",
							},
							Operator: 5,
							Right: &ast.IndexExpression{
								Array: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   38,
											},
											File:   "ecs.flux",
											Source: "[\"\",ds_suffix]",
											Start: ast.Position{
												Column: 37,
												Line:   38,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   38,
												},
												File:   "ecs.flux",
												Source: "\"\"",
												Start: ast.Position{
													Column: 38,
													Line:   38,
												},
											},
										},
										Value: "",
									}, &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   38,
												},
												File:   "ecs.flux",
												Source: "ds_suffix",
												Start: ast.Position{
													Column: 41,
													Line:   38,
												},
											},
										},
										Name: "ds_suffix",
									}},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   38,
										},
										File:   "ecs.flux",
										Source: "[\"\",ds_suffix][in_ds]",
										Start: ast.Position{
											Column: 37,
											Line:   38,
										},
									},
								},
								Index: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   38,
											},
											File:   "ecs.flux",
											Source: "in_ds",
											Start: ast.Position{
												Column: 52,
												Line:   38,
											},
										},
									},
									Name: "in_ds",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   39,
								},
								File:   "ecs.flux",
								Source: "new_window = [300, min_downsample_window][in_ds]",
								Start: ast.Position{
									Column: 5,
									Line:   39,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   39,
									},
									File:   "ecs.flux",
									Source: "new_window",
									Start: ast.Position{
										Column: 5,
										Line:   39,
									},
								},
							},
							Name: "new_window",
						},
						Init: &ast.IndexExpression{
							Array: &ast.ArrayExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   39,
										},
										File:   "ecs.flux",
										Source: "[300, min_downsample_window]",
										Start: ast.Position{
											Column: 18,
											Line:   39,
										},
									},
								},
								Elements: []ast.Expression{&ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   39,
											},
											File:   "ecs.flux",
											Source: "300",
											Start: ast.Position{
												Column: 19,
												Line:   39,
											},
										},
									},
									Value: int64(300),
								}, &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   39,
											},
											File:   "ecs.flux",
											Source: "min_downsample_window",
											Start: ast.Position{
												Column: 24,
												Line:   39,
											},
										},
									},
									Name: "min_downsample_window",
								}},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   39,
									},
									File:   "ecs.flux",
									Source: "[300, min_downsample_window][in_ds]",
									Start: ast.Position{
										Column: 18,
										Line:   39,
									},
								},
							},
							Index: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   39,
										},
										File:   "ecs.flux",
										Source: "in_ds",
										Start: ast.Position{
											Column: 47,
											Line:   39,
										},
									},
								},
								Name: "in_ds",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   44,
								},
								File:   "ecs.flux",
								Source: "dinf = get_dynamic_window_info(int_start:int_start,\n                                   int_stop:int_stop,\n                                   max:max, start_offset:start_offset,\n                                   stop_offset:stop_offset,\n                                   min_window:new_window)",
								Start: ast.Position{
									Column: 5,
									Line:   40,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   40,
									},
									File:   "ecs.flux",
									Source: "dinf",
									Start: ast.Position{
										Column: 5,
										Line:   40,
									},
								},
							},
							Name: "dinf",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   44,
										},
										File:   "ecs.flux",
										Source: "int_start:int_start,\n                                   int_stop:int_stop,\n                                   max:max, start_offset:start_offset,\n                                   stop_offset:stop_offset,\n                                   min_window:new_window",
										Start: ast.Position{
											Column: 36,
											Line:   40,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   40,
											},
											File:   "ecs.flux",
											Source: "int_start:int_start",
											Start: ast.Position{
												Column: 36,
												Line:   40,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   40,
												},
												File:   "ecs.flux",
												Source: "int_start",
												Start: ast.Position{
													Column: 36,
													Line:   40,
												},
											},
										},
										Name: "int_start",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   40,
												},
												File:   "ecs.flux",
												Source: "int_start",
												Start: ast.Position{
													Column: 46,
													Line:   40,
												},
											},
										},
										Name: "int_start",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   41,
											},
											File:   "ecs.flux",
											Source: "int_stop:int_stop",
											Start: ast.Position{
												Column: 36,
												Line:   41,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   41,
												},
												File:   "ecs.flux",
												Source: "int_stop",
												Start: ast.Position{
													Column: 36,
													Line:   41,
												},
											},
										},
										Name: "int_stop",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   41,
												},
												File:   "ecs.flux",
												Source: "int_stop",
												Start: ast.Position{
													Column: 45,
													Line:   41,
												},
											},
										},
										Name: "int_stop",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   42,
											},
											File:   "ecs.flux",
											Source: "max:max",
											Start: ast.Position{
												Column: 36,
												Line:   42,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   42,
												},
												File:   "ecs.flux",
												Source: "max",
												Start: ast.Position{
													Column: 36,
													Line:   42,
												},
											},
										},
										Name: "max",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   42,
												},
												File:   "ecs.flux",
												Source: "max",
												Start: ast.Position{
													Column: 40,
													Line:   42,
												},
											},
										},
										Name: "max",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   42,
											},
											File:   "ecs.flux",
											Source: "start_offset:start_offset",
											Start: ast.Position{
												Column: 45,
												Line:   42,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   42,
												},
												File:   "ecs.flux",
												Source: "start_offset",
												Start: ast.Position{
													Column: 45,
													Line:   42,
												},
											},
										},
										Name: "start_offset",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   42,
												},
												File:   "ecs.flux",
												Source: "start_offset",
												Start: ast.Position{
													Column: 58,
													Line:   42,
												},
											},
										},
										Name: "start_offset",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   43,
											},
											File:   "ecs.flux",
											Source: "stop_offset:stop_offset",
											Start: ast.Position{
												Column: 36,
												Line:   43,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   43,
												},
												File:   "ecs.flux",
												Source: "stop_offset",
												Start: ast.Position{
													Column: 36,
													Line:   43,
												},
											},
										},
										Name: "stop_offset",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   43,
												},
												File:   "ecs.flux",
												Source: "stop_offset",
												Start: ast.Position{
													Column: 48,
													Line:   43,
												},
											},
										},
										Name: "stop_offset",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   44,
											},
											File:   "ecs.flux",
											Source: "min_window:new_window",
											Start: ast.Position{
												Column: 36,
												Line:   44,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   44,
												},
												File:   "ecs.flux",
												Source: "min_window",
												Start: ast.Position{
													Column: 36,
													Line:   44,
												},
											},
										},
										Name: "min_window",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   44,
												},
												File:   "ecs.flux",
												Source: "new_window",
												Start: ast.Position{
													Column: 47,
													Line:   44,
												},
											},
										},
										Name: "new_window",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   44,
									},
									File:   "ecs.flux",
									Source: "get_dynamic_window_info(int_start:int_start,\n                                   int_stop:int_stop,\n                                   max:max, start_offset:start_offset,\n                                   stop_offset:stop_offset,\n                                   min_window:new_window)",
									Start: ast.Position{
										Column: 12,
										Line:   40,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   40,
										},
										File:   "ecs.flux",
										Source: "get_dynamic_window_info",
										Start: ast.Position{
											Column: 12,
											Line:   40,
										},
									},
								},
								Name: "get_dynamic_window_info",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   50,
									},
									File:   "ecs.flux",
									Source: "{\n            in_downsample: in_ds,\n            duration: dinf.duration,\n            start: dinf.start, stop: dinf.stop,\n            measurement: new_measurement\n    }",
									Start: ast.Position{
										Column: 12,
										Line:   45,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   46,
										},
										File:   "ecs.flux",
										Source: "in_downsample: in_ds",
										Start: ast.Position{
											Column: 13,
											Line:   46,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   46,
											},
											File:   "ecs.flux",
											Source: "in_downsample",
											Start: ast.Position{
												Column: 13,
												Line:   46,
											},
										},
									},
									Name: "in_downsample",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   46,
											},
											File:   "ecs.flux",
											Source: "in_ds",
											Start: ast.Position{
												Column: 28,
												Line:   46,
											},
										},
									},
									Name: "in_ds",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   47,
										},
										File:   "ecs.flux",
										Source: "duration: dinf.duration",
										Start: ast.Position{
											Column: 13,
											Line:   47,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   47,
											},
											File:   "ecs.flux",
											Source: "duration",
											Start: ast.Position{
												Column: 13,
												Line:   47,
											},
										},
									},
									Name: "duration",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   47,
											},
											File:   "ecs.flux",
											Source: "dinf.duration",
											Start: ast.Position{
												Column: 23,
												Line:   47,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   47,
												},
												File:   "ecs.flux",
												Source: "dinf",
												Start: ast.Position{
													Column: 23,
													Line:   47,
												},
											},
										},
										Name: "dinf",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   47,
												},
												File:   "ecs.flux",
												Source: "duration",
												Start: ast.Position{
													Column: 28,
													Line:   47,
												},
											},
										},
										Name: "duration",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   48,
										},
										File:   "ecs.flux",
										Source: "start: dinf.start",
										Start: ast.Position{
											Column: 13,
											Line:   48,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   48,
											},
											File:   "ecs.flux",
											Source: "start",
											Start: ast.Position{
												Column: 13,
												Line:   48,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   48,
											},
											File:   "ecs.flux",
											Source: "dinf.start",
											Start: ast.Position{
												Column: 20,
												Line:   48,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   48,
												},
												File:   "ecs.flux",
												Source: "dinf",
												Start: ast.Position{
													Column: 20,
													Line:   48,
												},
											},
										},
										Name: "dinf",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   48,
												},
												File:   "ecs.flux",
												Source: "start",
												Start: ast.Position{
													Column: 25,
													Line:   48,
												},
											},
										},
										Name: "start",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   48,
										},
										File:   "ecs.flux",
										Source: "stop: dinf.stop",
										Start: ast.Position{
											Column: 32,
											Line:   48,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   48,
											},
											File:   "ecs.flux",
											Source: "stop",
											Start: ast.Position{
												Column: 32,
												Line:   48,
											},
										},
									},
									Name: "stop",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   48,
											},
											File:   "ecs.flux",
											Source: "dinf.stop",
											Start: ast.Position{
												Column: 38,
												Line:   48,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   48,
												},
												File:   "ecs.flux",
												Source: "dinf",
												Start: ast.Position{
													Column: 38,
													Line:   48,
												},
											},
										},
										Name: "dinf",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   48,
												},
												File:   "ecs.flux",
												Source: "stop",
												Start: ast.Position{
													Column: 43,
													Line:   48,
												},
											},
										},
										Name: "stop",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   49,
										},
										File:   "ecs.flux",
										Source: "measurement: new_measurement",
										Start: ast.Position{
											Column: 13,
											Line:   49,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   49,
											},
											File:   "ecs.flux",
											Source: "measurement",
											Start: ast.Position{
												Column: 13,
												Line:   49,
											},
										},
									},
									Name: "measurement",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   49,
											},
											File:   "ecs.flux",
											Source: "new_measurement",
											Start: ast.Position{
												Column: 26,
												Line:   49,
											},
										},
									},
									Name: "new_measurement",
								},
							}},
							With: nil,
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   50,
								},
								File:   "ecs.flux",
								Source: "return {\n            in_downsample: in_ds,\n            duration: dinf.duration,\n            start: dinf.start, stop: dinf.stop,\n            measurement: new_measurement\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   45,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   27,
							},
							File:   "ecs.flux",
							Source: "start",
							Start: ast.Position{
								Column: 28,
								Line:   27,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   27,
								},
								File:   "ecs.flux",
								Source: "start",
								Start: ast.Position{
									Column: 28,
									Line:   27,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   27,
							},
							File:   "ecs.flux",
							Source: "stop",
							Start: ast.Position{
								Column: 35,
								Line:   27,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   27,
								},
								File:   "ecs.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 35,
									Line:   27,
								},
							},
						},
						Name: "stop",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 44,
								Line:   27,
							},
							File:   "ecs.flux",
							Source: "max",
							Start: ast.Position{
								Column: 41,
								Line:   27,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   27,
								},
								File:   "ecs.flux",
								Source: "max",
								Start: ast.Position{
									Column: 41,
									Line:   27,
								},
							},
						},
						Name: "max",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   28,
							},
							File:   "ecs.flux",
							Source: "start_offset=2",
							Start: ast.Position{
								Column: 28,
								Line:   28,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   28,
								},
								File:   "ecs.flux",
								Source: "start_offset",
								Start: ast.Position{
									Column: 28,
									Line:   28,
								},
							},
						},
						Name: "start_offset",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   28,
								},
								File:   "ecs.flux",
								Source: "2",
								Start: ast.Position{
									Column: 41,
									Line:   28,
								},
							},
						},
						Value: int64(2),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   28,
							},
							File:   "ecs.flux",
							Source: "stop_offset=1",
							Start: ast.Position{
								Column: 44,
								Line:   28,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   28,
								},
								File:   "ecs.flux",
								Source: "stop_offset",
								Start: ast.Position{
									Column: 44,
									Line:   28,
								},
							},
						},
						Name: "stop_offset",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   28,
								},
								File:   "ecs.flux",
								Source: "1",
								Start: ast.Position{
									Column: 56,
									Line:   28,
								},
							},
						},
						Value: int64(1),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   29,
							},
							File:   "ecs.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 28,
								Line:   29,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   29,
								},
								File:   "ecs.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 28,
									Line:   29,
								},
							},
						},
						Name: "measurement",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   30,
							},
							File:   "ecs.flux",
							Source: "ds_suffix=\"_downsampled\"",
							Start: ast.Position{
								Column: 28,
								Line:   30,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   30,
								},
								File:   "ecs.flux",
								Source: "ds_suffix",
								Start: ast.Position{
									Column: 28,
									Line:   30,
								},
							},
						},
						Name: "ds_suffix",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   30,
								},
								File:   "ecs.flux",
								Source: "\"_downsampled\"",
								Start: ast.Position{
									Column: 38,
									Line:   30,
								},
							},
						},
						Value: "_downsampled",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 51,
								Line:   31,
							},
							File:   "ecs.flux",
							Source: "downsample_limit=432000",
							Start: ast.Position{
								Column: 28,
								Line:   31,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   31,
								},
								File:   "ecs.flux",
								Source: "downsample_limit",
								Start: ast.Position{
									Column: 28,
									Line:   31,
								},
							},
						},
						Name: "downsample_limit",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   31,
								},
								File:   "ecs.flux",
								Source: "432000",
								Start: ast.Position{
									Column: 45,
									Line:   31,
								},
							},
						},
						Value: int64(432000),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   32,
							},
							File:   "ecs.flux",
							Source: "min_downsample_window=86400",
							Start: ast.Position{
								Column: 28,
								Line:   32,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   32,
								},
								File:   "ecs.flux",
								Source: "min_downsample_window",
								Start: ast.Position{
									Column: 28,
									Line:   32,
								},
							},
						},
						Name: "min_downsample_window",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   32,
								},
								File:   "ecs.flux",
								Source: "86400",
								Start: ast.Position{
									Column: 50,
									Line:   32,
								},
							},
						},
						Value: int64(86400),
					},
				}},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=go",
		Name:     "ecs.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   1,
					},
					File:   "ecs.flux",
					Source: "package ecs",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   1,
						},
						File:   "ecs.flux",
						Source: "ecs",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "ecs",
			},
		},
	}},
	Package: "ecs",
	Path:    "ecs",
}
